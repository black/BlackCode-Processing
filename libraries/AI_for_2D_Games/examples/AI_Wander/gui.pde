/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void cbxHead_change(GCheckbox source, GEvent event) { //_CODE_:cbxHead:432965:
  if (source.isSelected())
    view.addHints(Hints.HINT_HEADING);
  else
    view.removeHints(Hints.HINT_HEADING);
} //_CODE_:cbxHead:432965:

public void cbxVel_change(GCheckbox source, GEvent event) { //_CODE_:cbxVel:794418:
  if (source.isSelected())
    view.addHints(Hints.HINT_VELOCITY);
  else
    view.removeHints(Hints.HINT_VELOCITY);
} //_CODE_:cbxVel:794418:

public void cbxWander_change(GCheckbox source, GEvent event) { //_CODE_:cbxWander:610280:
  if (source.isSelected())
    view.addHints(Hints.HINT_WANDER);
  else
    view.removeHints(Hints.HINT_WANDER);
} //_CODE_:cbxWander:610280:

public void cbxTrail_change(GCheckbox source, GEvent event) { //_CODE_:cbxTrail:593718:
  trailVisible = source.isSelected();
} //_CODE_:cbxTrail:593718:

public void sdrRadius_change(GSlider source, GEvent event) { //_CODE_:sdrRadius:803884:
  updateWanderBits();
} //_CODE_:sdrRadius:803884:

public void sdrDist_change(GSlider source, GEvent event) { //_CODE_:sdrDist:773968:
  updateWanderBits();
} //_CODE_:sdrDist:773968:

public void sdrJitter_change(GSlider source, GEvent event) { //_CODE_:sdrJitter:913660:
  updateWanderBits();
} //_CODE_:sdrJitter:913660:

public void sdrTrail_change(GSlider source, GEvent event) { //_CODE_:sdrTrail:636000:
  maxTrailSize = source.getValueI();
} //_CODE_:sdrTrail:636000:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.GREEN_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  panel1 = new GPanel(this, 0, 0, 284, 188, "Options (Click to hide/view)");
  panel1.setDraggable(false);
  panel1.setText("Options (Click to hide/view)");
  panel1.setTextBold();
  panel1.setOpaque(true);
  panel1.addEventHandler(this, "");
  cbxHead = new GCheckbox(this, 0, 124, 75, 20);
  cbxHead.setText("Heading");
  cbxHead.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  cbxHead.setOpaque(false);
  cbxHead.setSelected(true);
  cbxHead.addEventHandler(this, "cbxHead_change");
  cbxVel = new GCheckbox(this, 76, 124, 75, 20);
  cbxVel.setText("Velocity");
  cbxVel.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  cbxVel.setOpaque(false);
  cbxVel.setSelected(true);
  cbxVel.addEventHandler(this, "cbxVel_change");
  cbxWander = new GCheckbox(this, 152, 124, 75, 20);
  cbxWander.setText("Wander");
  cbxWander.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  cbxWander.setOpaque(false);
  cbxWander.setSelected(true);
  cbxWander.addEventHandler(this, "cbxWander_change");
  cbxTrail = new GCheckbox(this, 224, 124, 56, 20);
  cbxTrail.setText("Trail");
  cbxTrail.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  cbxTrail.setOpaque(false);
  cbxTrail.setSelected(true);
  cbxTrail.addEventHandler(this, "cbxTrail_change");
  sdrRadius = new GSlider(this, 4, 20, 216, 40, 10.0);
  sdrRadius.setShowValue(true);
  sdrRadius.setLimits(30.0, 10.0, 60.0);
  sdrRadius.setEasing(10.0);
  sdrRadius.setNumberFormat(G4P.INTEGER, 0);
  sdrRadius.setOpaque(false);
  sdrRadius.addEventHandler(this, "sdrRadius_change");
  label1 = new GLabel(this, 220, 20, 60, 40);
  label1.setText("Wander radius");
  label1.setOpaque(false);
  sdrDist = new GSlider(this, 4, 52, 216, 40, 10.0);
  sdrDist.setShowValue(true);
  sdrDist.setLimits(80.0, 30.0, 100.0);
  sdrDist.setNumberFormat(G4P.INTEGER, 0);
  sdrDist.setOpaque(false);
  sdrDist.addEventHandler(this, "sdrDist_change");
  label2 = new GLabel(this, 220, 52, 60, 40);
  label2.setText("Distance");
  label2.setOpaque(false);
  sdrJitter = new GSlider(this, 4, 84, 216, 40, 10.0);
  sdrJitter.setShowValue(true);
  sdrJitter.setLimits(20.0, 10.0, 100.0);
  sdrJitter.setNumberFormat(G4P.INTEGER, 0);
  sdrJitter.setOpaque(false);
  sdrJitter.addEventHandler(this, "sdrJitter_change");
  label3 = new GLabel(this, 220, 84, 60, 40);
  label3.setText("Jitter");
  label3.setOpaque(false);
  sdrTrail = new GSlider(this, 4, 144, 216, 40, 10.0);
  sdrTrail.setShowValue(true);
  sdrTrail.setLimits(1000.0, 500.0, 2000.0);
  sdrTrail.setNumberFormat(G4P.INTEGER, 0);
  sdrTrail.setOpaque(false);
  sdrTrail.addEventHandler(this, "sdrTrail_change");
  label4 = new GLabel(this, 220, 144, 60, 40);
  label4.setText("Trail length");
  label4.setOpaque(false);
  panel1.addControl(cbxHead);
  panel1.addControl(cbxVel);
  panel1.addControl(cbxWander);
  panel1.addControl(cbxTrail);
  panel1.addControl(sdrRadius);
  panel1.addControl(label1);
  panel1.addControl(sdrDist);
  panel1.addControl(label2);
  panel1.addControl(sdrJitter);
  panel1.addControl(label3);
  panel1.addControl(sdrTrail);
  panel1.addControl(label4);
}

// Variable declarations 
// autogenerated do not edit
GPanel panel1; 
GCheckbox cbxHead; 
GCheckbox cbxVel; 
GCheckbox cbxWander; 
GCheckbox cbxTrail; 
GSlider sdrRadius; 
GLabel label1; 
GSlider sdrDist; 
GLabel label2; 
GSlider sdrJitter; 
GLabel label3; 
GSlider sdrTrail; 
GLabel label4; 

